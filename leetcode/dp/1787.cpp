// https://leetcode-cn.com/problems/make-the-xor-of-all-segments-equal-to-zero/submissions/
// Created by admin on 2021/5/25.
// dp，难。。。

using namespace std;
#include <vector>
#include <unordered_map>
#include <iostream>

class Solution {
public:
    int minChanges(vector<int>& nums, int k) {
        // dp[i][j] 表示将前i组修改为异或=j所需要的最少次数
        // dp[i][j]
        // 1. 修改部分 = dp[i-1][k] + (cnt - map_list[i][j^k])
        // 2. 全部修改 = min(dp[i-1][?]) + cnt;
        int col = 1;
        int maxValue = 0;
        vector<unordered_map<int,int>> map_list(k,unordered_map<int,int>());
        vector<int> cnt(k,0);
        for (int i = 0; i < nums.size(); ++i) {
            map_list[i%k][nums[i]]++;
            maxValue = max(maxValue,nums[i]);
            cnt[i%k]++;
        }
        while(col<=maxValue){
            col = (col<<1);
        }
        vector<vector<int>> dp(k,vector<int>(col));
        int preMin = 999999;
        // init
        for (int i = 0; i < col; ++i) {
            dp[0][i] = cnt[0] - map_list[0][i];
            preMin = min(preMin,dp[0][i]);
        }
        // dp
        for (int i = 1; i < k; ++i) {
            int tmpPreMin = 999999;
            for (int j = 0; j < col; ++j) {
                dp[i][j] = preMin + cnt[i];
                for(auto item:map_list[i]){
                    // 把该列统一改为item
                    dp[i][j] = min(dp[i-1][j^item.first]+cnt[i] - item.second,dp[i][j]);
                }
                tmpPreMin = min(tmpPreMin,dp[i][j]);
            }
            preMin = tmpPreMin;
        }
        return dp[k-1][0];
    }
};

int main(){
    Solution s;
//    vector<int> v{3,4,5,2,1,7,3,4,7};
    vector<int> v{783,985,444,935,468,348,928,43,488,629,405,874,473,347,4,340,345,261,104,595,573,542,777,463,164,982,87,45,453,476,125,213,836,746,708,563,999,42,642,77,211,199,844,627,299,946,491,569,538,272,735,1018,198,802,16,44,801,21,415,1,985,949,1001,141,929,556,811,613,254,121,398,569,920,237,928,841,968,195,663,18,74,700,848,1018,158,223,747,849,268,715,946,218,854,940,965,770,912,25,294,499,963,181,137,503,743,127,539,383,780,560,254,508,328,172,511,579,12,788,560,722,510,606,178,742,715,187,671,687,653,118,33,740,170,672,745,62,962,904,459,521,180,500,721,112,945,686,393,415,723,951,626,1002,397,577,800,997,347,885,557,324,132,743,782,568,883,366,608,881,555,375,19,300,194,207,52,333,713,729,24,399,848,101,1018,439,143,614,398,591,589,267,271,281,399,728,13,124,164,739,688,851,619,611,793,816,712,411,961,54,763,381,431,253,852,968,554,395,918,696,1005,25,485,913,226,564,328,311,271,508,841,729,220,758,786,407,369,458,956,855,103,4,743,131,561,363,140,493,332,451,795,333,673,444,633,934,615,165,89,324,563,823,962,170,929,591,981,943,33,804,960,561,823,794,281,275,891,464,428,378,255,67,701,994,122,104,171,599,996,938,59,809,307,900,164,654,910,683,932,784,919,762,621,550,399,1020,128,901,382,895,164,648,644,505,711,207,710,422,633,964,679,596,930,835,64,133,585,232,99,376,513,1013,600,1005,58,198,661,825,597,763,382,181,519,891,359,254,141,771,410,147,908,25,512,19,862,945,233,98,396,54,284,961,326,652,532,17,420,571,299,680,280,800,493,330,808,467,159,644,451,479,562,250,640,63,261,38,674,282,643,964,863,709,622,196,113,817,460,358,670,783,192,395,268,162,535,429,608,327,582,492,443,510,976,777,88,218,519,131,835,223,426,353,134,732,882,347,375,830,639,212,515,286,352,370,949,107,9,762,388,372,167,860,101,84,656,443,425,610,1009,856,894,985,164,357,999,355,246,303,305,32,111,315,938,329,558,909,371,169,116,536,273,188,487,849,473,66,678,899,526,348,824,1023,437,220,650,239,886,616,389,998,199,567,54,457,793,332,982,426,839,341,1002,376,337,26,845,549,734,240,164,42,418,257,871,334,101,12,955,535,634,87,994,339,469,661,93,836,337,960,388,323,524,197,169,43,432,588,466,926,769,976,105,847,112,931,800,181,247,383,650,525,365,877,588,250,289,222,758,81,1014,430,560,928,777,331,446,358,602,824,777,644,50,503,539,915,247,298,282,844,937,44,34,766,978,687,246,511,650,875,391,243,662,837,457,739,790,122,412,225,228,457,207,966,52,420,639,583,977,231,43,504,628,274,841,159,280,968,775,169,98,583,900,189,120,545,100,63,862,23,258,422,582,242,830,341,716,879,980,374,215,654,196,211,765,498,983,938,643,890,627,878,130,176,738,132,126,527,883,774,820,367,355,205,260,1010,124,686,57,532,144,113,191,202,8,801,773,271,477,414,770,671,827,686,44,960,555,822,911,406,663,282,29,150,908,395,16,852,84,622,46,263,288,133,231,198,311,845,349,945,339,978,315,491,636,474,312,130,636,674,769,644,265,138,651,327,915,517,169,763,139,849,501,953,926,278};
    cout << s.minChanges(v,587);
}